data.azurerm_client_config.customer: Reading...
data.azurerm_client_config.customer: Read complete after 0s [id=Y2xpZW50Q29uZmlncy9jbGllbnRJZD0wNGIwNzc5NS04ZGRiLTQ2MWEtYmJlZS0wMmY5ZTFiZjdiNDY7b2JqZWN0SWQ9NjEwYWQyMmYtODI5NC00OGZiLThlODUtYzkxMTgxYzIwYjY3O3N1YnNjcmlwdGlvbklkPWI2ZjIyMGQ2LTQ3M2ItNGY4YS1hOGQ1LWJiZmRmNjUyYTBkZjt0ZW5hbnRJZD0zZjU5NzM1MC1mMmZmLTQ2MzAtYjBhOC1lYTkxY2FmYWVmMzc=]
data.azurerm_subscription.customer: Reading...
data.azurerm_subscription.customer: Read complete after 1s [id=/subscriptions/b6f220d6-473b-4f8a-a8d5-bbfdf652a0df]

OpenTofu used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  + create

OpenTofu will perform the following actions:

  # module.sas_viya_acr.azurerm_container_registry.lz["sas-viya"] will be created
  + resource "azurerm_container_registry" "lz" {
      + admin_enabled                 = true
      + admin_password                = (sensitive value)
      + admin_username                = (known after apply)
      + encryption                    = (known after apply)
      + export_policy_enabled         = true
      + id                            = (known after apply)
      + location                      = "westeurope"
      + login_server                  = (known after apply)
      + name                          = "spankkisasdev"
      + network_rule_bypass_option    = "AzureServices"
      + network_rule_set              = (known after apply)
      + public_network_access_enabled = false
      + resource_group_name           = "rg-spankki-afc-esp-we-acr-dev"
      + retention_policy              = (known after apply)
      + sku                           = "Premium"
      + trust_policy                  = (known after apply)
      + zone_redundancy_enabled       = false

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }
    }

  # module.sas_viya_aks.azurerm_kubernetes_cluster.lz["sas-viya"] will be created
  + resource "azurerm_kubernetes_cluster" "lz" {
      + api_server_authorized_ip_ranges     = (known after apply)
      + current_kubernetes_version          = (known after apply)
      + dns_prefix                          = "spankki"
      + fqdn                                = (known after apply)
      + http_application_routing_zone_name  = (known after apply)
      + id                                  = (known after apply)
      + image_cleaner_enabled               = false
      + image_cleaner_interval_hours        = 48
      + kube_admin_config                   = (sensitive value)
      + kube_admin_config_raw               = (sensitive value)
      + kube_config                         = (sensitive value)
      + kube_config_raw                     = (sensitive value)
      + kubernetes_version                  = (known after apply)
      + location                            = "westeurope"
      + name                                = "aks-spankki-afc-esp-we-sas-dev"
      + node_resource_group                 = (known after apply)
      + node_resource_group_id              = (known after apply)
      + oidc_issuer_url                     = (known after apply)
      + portal_fqdn                         = (known after apply)
      + private_cluster_enabled             = false
      + private_cluster_public_fqdn_enabled = false
      + private_dns_zone_id                 = (known after apply)
      + private_fqdn                        = (known after apply)
      + public_network_access_enabled       = true
      + resource_group_name                 = "rg-spankki-afc-esp-we-aks-dev"
      + role_based_access_control_enabled   = true
      + run_command_enabled                 = true
      + sku_tier                            = "Free"
      + support_plan                        = "KubernetesOfficial"
      + workload_identity_enabled           = false

      + default_node_pool {
          + kubelet_disk_type    = (known after apply)
          + max_pods             = (known after apply)
          + name                 = "default"
          + node_count           = (known after apply)
          + node_labels          = (known after apply)
          + orchestrator_version = (known after apply)
          + os_disk_size_gb      = (known after apply)
          + os_disk_type         = "Managed"
          + os_sku               = (known after apply)
          + scale_down_mode      = "Delete"
          + type                 = "VirtualMachineScaleSets"
          + ultra_ssd_enabled    = false
          + vm_size              = "Standard_D2_v2"
          + workload_runtime     = (known after apply)
        }

      + identity {
          + principal_id = (known after apply)
          + tenant_id    = (known after apply)
          + type         = "SystemAssigned"
        }
    }

  # module.sas_viya_aks.azurerm_kubernetes_cluster_node_pool.lz["sas-viya_sas-viya-compute"] will be created
  + resource "azurerm_kubernetes_cluster_node_pool" "lz" {
      + id                    = (known after apply)
      + kubelet_disk_type     = (known after apply)
      + kubernetes_cluster_id = (known after apply)
      + max_pods              = (known after apply)
      + mode                  = "User"
      + name                  = "compute"
      + node_count            = (known after apply)
      + node_labels           = (known after apply)
      + orchestrator_version  = (known after apply)
      + os_disk_size_gb       = (known after apply)
      + os_disk_type          = "Managed"
      + os_sku                = (known after apply)
      + os_type               = "Linux"
      + priority              = "Regular"
      + scale_down_mode       = "Delete"
      + spot_max_price        = -1
      + ultra_ssd_enabled     = false
      + vm_size               = "Standard_DS2_v2"
    }

  # module.sas_viya_anf.azurerm_netapp_account.lz["sas-viya"] will be created
  + resource "azurerm_netapp_account" "lz" {
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "anf-spankki-afc-esp-we-dev"
      + resource_group_name = "rg-spankki-afc-esp-we-anf-dev"
    }

  # module.sas_viya_anf.azurerm_netapp_pool.lz["sas-viya-premium"] will be created
  + resource "azurerm_netapp_pool" "lz" {
      + account_name        = "anf-spankki-afc-esp-we-dev"
      + encryption_type     = "Single"
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "anf-pool-spankki-afc-esp-we-premium-dev"
      + qos_type            = "Manual"
      + resource_group_name = "rg-spankki-afc-esp-we-anf-dev"
      + service_level       = "Premium"
      + size_in_tb          = 2
    }

  # module.sas_viya_anf.azurerm_netapp_pool.lz["sas-viya-standard"] will be created
  + resource "azurerm_netapp_pool" "lz" {
      + account_name        = "anf-spankki-afc-esp-we-dev"
      + encryption_type     = "Single"
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "anf-pool-spankki-afc-esp-we-standard-dev"
      + qos_type            = "Manual"
      + resource_group_name = "rg-spankki-afc-esp-we-anf-dev"
      + service_level       = "Standard"
      + size_in_tb          = 2
    }

  # module.sas_viya_anf.azurerm_netapp_volume.lz["sas-viya-common"] will be created
  + resource "azurerm_netapp_volume" "lz" {
      + account_name                         = "anf-spankki-afc-esp-we-dev"
      + azure_vmware_data_store_enabled      = false
      + encryption_key_source                = (known after apply)
      + id                                   = (known after apply)
      + key_vault_private_endpoint_id        = (known after apply)
      + location                             = "westeurope"
      + mount_ip_addresses                   = (known after apply)
      + name                                 = "anf-volume-spankki-afc-esp-we-common-dev"
      + network_features                     = "Standard"
      + pool_name                            = "anf-pool-spankki-afc-esp-we-standard-dev"
      + protocols                            = [
          + "NFSv4.1",
        ]
      + resource_group_name                  = "rg-spankki-afc-esp-we-anf-dev"
      + security_style                       = "unix"
      + service_level                        = "Standard"
      + smb_access_based_enumeration_enabled = false
      + smb_non_browsable_enabled            = false
      + snapshot_directory_visible           = false
      + storage_quota_in_gb                  = 100
      + subnet_id                            = "/subscriptions/b6f220d6-473b-4f8a-a8d5-bbfdf652a0df/resourceGroups/rg-ismok-bicep-dev/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/subnet1"
      + throughput_in_mibps                  = (known after apply)
      + volume_path                          = "common"
      + zone                                 = "1"

      + export_policy_rule {
          + allowed_clients     = [
              + "10.0.0.0/16",
            ]
          + protocols_enabled   = [
              + "NFSv4.1",
            ]
          + root_access_enabled = true
          + rule_index          = 1
          + unix_read_write     = true
        }
    }

  # module.sas_viya_anf.azurerm_netapp_volume.lz["sas-viya-data"] will be created
  + resource "azurerm_netapp_volume" "lz" {
      + account_name                         = "anf-spankki-afc-esp-we-dev"
      + azure_vmware_data_store_enabled      = false
      + encryption_key_source                = (known after apply)
      + id                                   = (known after apply)
      + key_vault_private_endpoint_id        = (known after apply)
      + location                             = "westeurope"
      + mount_ip_addresses                   = (known after apply)
      + name                                 = "anf-volume-spankki-afc-esp-we-data-dev"
      + network_features                     = "Standard"
      + pool_name                            = "anf-pool-spankki-afc-esp-we-premium-dev"
      + protocols                            = [
          + "CIFS",
        ]
      + resource_group_name                  = "rg-spankki-afc-esp-we-anf-dev"
      + security_style                       = "unix"
      + service_level                        = "Premium"
      + smb_access_based_enumeration_enabled = false
      + smb_non_browsable_enabled            = false
      + snapshot_directory_visible           = false
      + storage_quota_in_gb                  = 100
      + subnet_id                            = "/subscriptions/b6f220d6-473b-4f8a-a8d5-bbfdf652a0df/resourceGroups/rg-ismok-bicep-dev/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/subnet1"
      + throughput_in_mibps                  = (known after apply)
      + volume_path                          = "data"
      + zone                                 = "1"

      + export_policy_rule {
          + allowed_clients   = [
              + "172.17.2.0/24",
            ]
          + protocols_enabled = [
              + "CIFS",
            ]
          + rule_index        = 1
        }
    }

  # module.sas_viya_anf.azurerm_netapp_volume_quota_rule.lz["sas-viya-common_quota-rule-developers"] will be created
  + resource "azurerm_netapp_volume_quota_rule" "lz" {
      + id                = (known after apply)
      + location          = "westeurope"
      + name              = "quota-rule-developers"
      + quota_size_in_kib = 256
      + quota_target      = "42"
      + quota_type        = "DefaultGroupQuota"
      + volume_id         = (known after apply)
    }

  # module.sas_viya_dns.azurerm_private_dns_zone.lz["privatelink-blob"] will be created
  + resource "azurerm_private_dns_zone" "lz" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.blob.core.windows.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-spankki-afc-esp-we-network-dev"
      + tags                                                  = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_dns.azurerm_private_dns_zone.lz["privatelink-keyvault"] will be created
  + resource "azurerm_private_dns_zone" "lz" {
      + id                                                    = (known after apply)
      + max_number_of_record_sets                             = (known after apply)
      + max_number_of_virtual_network_links                   = (known after apply)
      + max_number_of_virtual_network_links_with_registration = (known after apply)
      + name                                                  = "privatelink.vaultcore.azure.net"
      + number_of_record_sets                                 = (known after apply)
      + resource_group_name                                   = "rg-spankki-afc-esp-we-network-dev"
      + tags                                                  = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_dns.azurerm_private_dns_zone_virtual_network_link.lz["privatelink-blob"] will be created
  + resource "azurerm_private_dns_zone_virtual_network_link" "lz" {
      + id                    = (known after apply)
      + name                  = "sas-viya"
      + private_dns_zone_name = "privatelink.blob.core.windows.net"
      + registration_enabled  = false
      + resource_group_name   = "rg-spankki-afc-esp-we-network-dev"
      + tags                  = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
      + virtual_network_id    = (known after apply)
    }

  # module.sas_viya_network.azurerm_subnet.lz["sas-viya-dev_sas-viya-dev-aks"] will be created
  + resource "azurerm_subnet" "lz" {
      + address_prefixes                               = [
          + "10.10.0.0/24",
        ]
      + default_outbound_access_enabled                = true
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet-spankki-afc-esp-we-aks-dev"
      + private_endpoint_network_policies              = (known after apply)
      + private_endpoint_network_policies_enabled      = (known after apply)
      + private_link_service_network_policies_enabled  = (known after apply)
      + resource_group_name                            = "rg-spankki-afc-esp-we-network-dev"
      + service_endpoints                              = [
          + "Microsoft.KeyVault",
          + "Microsoft.Storage",
        ]
      + virtual_network_name                           = "vnet-spankki-afc-esp-we-sas-dev"

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_network.azurerm_subnet.lz["sas-viya-dev_sas-viya-dev-anf"] will be created
  + resource "azurerm_subnet" "lz" {
      + address_prefixes                               = [
          + "10.10.1.0/24",
        ]
      + default_outbound_access_enabled                = true
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet-spankki-afc-esp-we-anf-dev"
      + private_endpoint_network_policies              = (known after apply)
      + private_endpoint_network_policies_enabled      = (known after apply)
      + private_link_service_network_policies_enabled  = (known after apply)
      + resource_group_name                            = "rg-spankki-afc-esp-we-network-dev"
      + virtual_network_name                           = "vnet-spankki-afc-esp-we-sas-dev"

      + delegation {
          + name = "sas-viya-anf"

          + service_delegation {
              + actions = [
                  + "Microsoft.Network/networkinterfaces/*",
                  + "Microsoft.Network/virtualNetworks/subnets/join/action",
                ]
              + name    = "Microsoft.Netapp/volumes"
            }
        }

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_network.azurerm_subnet.lz["sas-viya-dev_sas-viya-dev-endpoint"] will be created
  + resource "azurerm_subnet" "lz" {
      + address_prefixes                               = [
          + "10.10.2.0/24",
        ]
      + default_outbound_access_enabled                = true
      + enforce_private_link_endpoint_network_policies = (known after apply)
      + enforce_private_link_service_network_policies  = (known after apply)
      + id                                             = (known after apply)
      + name                                           = "snet-spankki-afc-esp-we-endpoint-dev"
      + private_endpoint_network_policies              = (known after apply)
      + private_endpoint_network_policies_enabled      = (known after apply)
      + private_link_service_network_policies_enabled  = (known after apply)
      + resource_group_name                            = "rg-spankki-afc-esp-we-network-dev"
      + virtual_network_name                           = "vnet-spankki-afc-esp-we-sas-dev"

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_network.azurerm_virtual_network.lz["sas-viya-dev"] will be created
  + resource "azurerm_virtual_network" "lz" {
      + address_space       = [
          + "10.10.0.0/16",
        ]
      + dns_servers         = (known after apply)
      + guid                = (known after apply)
      + id                  = (known after apply)
      + location            = "westeurope"
      + name                = "vnet-spankki-afc-esp-we-sas-dev"
      + resource_group_name = "rg-spankki-afc-esp-we-network-dev"
      + subnet              = (known after apply)
      + tags                = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_network_private_endpoint.azurerm_private_endpoint.lz["confluent-cloud-kafka"] will be created
  + resource "azurerm_private_endpoint" "lz" {
      + custom_dns_configs       = (known after apply)
      + id                       = (known after apply)
      + location                 = "westeurope"
      + name                     = "endpoint-spankki-afc-esp-we-kafka-dev"
      + network_interface        = (known after apply)
      + private_dns_zone_configs = (known after apply)
      + resource_group_name      = "rg-spankki-afc-esp-we-network-dev"
      + subnet_id                = (known after apply)
      + tags                     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }

      + ip_configuration {
          + member_name        = (known after apply)
          + name               = "privatelink-kafka-dev"
          + private_ip_address = "10.10.2.32"
        }

      + private_service_connection {
          + is_manual_connection              = true
          + name                              = "endpoint-spankki-afc-esp-we-kafka-dev"
          + private_connection_resource_alias = "to-be-defined.westeurope.azure.privatelinkservice"
          + private_ip_address                = (known after apply)
          + request_message                   = "Please approve my connection, thanks."
        }

      + timeouts {
          + create = "15m"
          + delete = "15m"
          + update = "15m"
        }
    }

  # module.sas_viya_postgresql.azurerm_postgresql_flexible_server.lz["sas-viya"] will be created
  + resource "azurerm_postgresql_flexible_server" "lz" {
      + administrator_login           = "psqladmin"
      + administrator_password        = (sensitive value)
      + auto_grow_enabled             = false
      + backup_retention_days         = (known after apply)
      + delegated_subnet_id           = "/subscriptions/b6f220d6-473b-4f8a-a8d5-bbfdf652a0df/resourceGroups/rg-ismok-bicep-dev/providers/Microsoft.Network/virtualNetworks/testvnet/subnets/subnet1"
      + fqdn                          = (known after apply)
      + geo_redundant_backup_enabled  = false
      + id                            = (known after apply)
      + location                      = "westeurope"
      + name                          = "psql-spankki-afc-esp-we-sas-dev"
      + private_dns_zone_id           = (known after apply)
      + public_network_access_enabled = false
      + resource_group_name           = "rg-spankki-afc-esp-we-postgresql-dev"
      + sku_name                      = "GP_Standard_D4s_v3"
      + storage_mb                    = 32768
      + storage_tier                  = "P30"
      + version                       = "12"
      + zone                          = "1"
    }

  # module.sas_viya_resource_group.azurerm_resource_group.lz["sas-viya-acr"] will be created
  + resource "azurerm_resource_group" "lz" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-spankki-afc-esp-we-acr-dev"
      + tags     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
    }

  # module.sas_viya_resource_group.azurerm_resource_group.lz["sas-viya-aks"] will be created
  + resource "azurerm_resource_group" "lz" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-spankki-afc-esp-we-aks-dev"
      + tags     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
    }

  # module.sas_viya_resource_group.azurerm_resource_group.lz["sas-viya-anf"] will be created
  + resource "azurerm_resource_group" "lz" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-spankki-afc-esp-we-anf-dev"
      + tags     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
    }

  # module.sas_viya_resource_group.azurerm_resource_group.lz["sas-viya-common"] will be created
  + resource "azurerm_resource_group" "lz" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-spankki-afc-esp-we-common-dev"
      + tags     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
    }

  # module.sas_viya_resource_group.azurerm_resource_group.lz["sas-viya-network"] will be created
  + resource "azurerm_resource_group" "lz" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-spankki-afc-esp-we-network-dev"
      + tags     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
    }

  # module.sas_viya_resource_group.azurerm_resource_group.lz["sas-viya-servicebus"] will be created
  + resource "azurerm_resource_group" "lz" {
      + id       = (known after apply)
      + location = "westeurope"
      + name     = "rg-spankki-afc-esp-we-servicebus-dev"
      + tags     = {
          + "managed_by" = "tietoevry"
          + "terraform"  = "true"
        }
    }

  # module.sas_viya_servicebus.azurerm_servicebus_namespace.lz["sasa-viya"] will be created
  + resource "azurerm_servicebus_namespace" "lz" {
      + capacity                            = 0
      + default_primary_connection_string   = (sensitive value)
      + default_primary_key                 = (sensitive value)
      + default_secondary_connection_string = (sensitive value)
      + default_secondary_key               = (sensitive value)
      + endpoint                            = (known after apply)
      + id                                  = (known after apply)
      + local_auth_enabled                  = true
      + location                            = "westeurope"
      + minimum_tls_version                 = (known after apply)
      + name                                = "sbus-spankki-afc-esp-we-common-dev"
      + premium_messaging_partitions        = 0
      + public_network_access_enabled       = true
      + resource_group_name                 = "rg-spankki-afc-esp-we-servicebus-dev"
      + sku                                 = "Standard"
    }

  # module.sas_viya_servicebus.azurerm_servicebus_namespace_authorization_rule.lz["sasa-viya"] will be created
  + resource "azurerm_servicebus_namespace_authorization_rule" "lz" {
      + id                                = (known after apply)
      + listen                            = true
      + manage                            = false
      + name                              = "sbus-spankki-afc-esp-we-rule-dev"
      + namespace_id                      = (known after apply)
      + primary_connection_string         = (sensitive value)
      + primary_connection_string_alias   = (sensitive value)
      + primary_key                       = (sensitive value)
      + secondary_connection_string       = (sensitive value)
      + secondary_connection_string_alias = (sensitive value)
      + secondary_key                     = (sensitive value)
      + send                              = true
    }

Plan: 26 to add, 0 to change, 0 to destroy.

─────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so OpenTofu can't
guarantee to take exactly these actions if you run "tofu apply" now.
